// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15],out=out1);
    Not(in=out1,out=out2);
    And(a=out2,b=instruction[5],out=out3);
    Mux16(a=instruction,b=in2,sel=out3,out=out4);
    
    Or(a=out1,b=out3,out=lA);
    ARegister(in=out4,load=lA,out=out5,out[0..14]=addressM);
    Mux16(a=out5,b=inM,sel=instruction[12],out=outM2);
    And(a=out2,b=instruction[4],out=lD);
    DRegister(in=in2,load=lD,out=outD);
    And(a=out2, b= instruction[3], out=writeM);
    ALU(x=outD,y=outM2,no=instruction[6],f=instruction[7],ny=instruction[8],zy=instruction[9],nx=instruction[10],zx=instruction[11],out=in2,out=outM,zr=outAL2,ng=outAL3);
    And(a=outAL2,b=instruction[1],out=andout);
    And(a=outAL3,b=instruction[2],out=out6);
    Or(a=outAL2,b=outAL3,out=orout);
    Not(in=orout,out=nout);
    And(a=nout,b=instruction[0],out=out7);
    Or(a=out7,b=andout,out=orout2);
    Or(a=orout2,b=out6,out=orout3);
    And(a=out2,b=orout3,out=outL);
    Not(in=outL, out=out8);
    PC(in=out5,load=outL,inc=out8,reset=reset,out[0..14]=pc);
}